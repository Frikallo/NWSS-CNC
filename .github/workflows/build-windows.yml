name: Build Windows

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.5.0'
        host: 'windows'
        target: 'desktop'
        modules: 'qtserialport'
        cache: true
        
    - name: Set up MSVC
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Configure CMake
      run: |
        cmake -B build -S nwss-cnc -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
        
    - name: Build
      run: |
        cmake --build build --config Release --target nwss-cnc
        
    - name: Sign application (if certificates are available)
      continue-on-error: true
      shell: powershell
      run: |
        if ($env:WINDOWS_CERTIFICATE_P12) {
          Write-Host "Setting up code signing..."
          
          # Decode and save certificate
          $certBytes = [System.Convert]::FromBase64String($env:WINDOWS_CERTIFICATE_P12)
          $certPath = "certificate.p12"
          [System.IO.File]::WriteAllBytes($certPath, $certBytes)
          
          # Import certificate to store
          $securePassword = ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -AsPlainText -Force
          Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\CurrentUser\My -Password $securePassword
          
          # Find the executable
          $exePath = Get-ChildItem -Path "build" -Recurse -Name "nwss-cnc.exe" | Select-Object -First 1
          if ($exePath) {
            $fullExePath = Join-Path "build" $exePath
            Write-Host "Found executable: $fullExePath"
            
            # Sign the executable
            & signtool sign /fd SHA256 /tr http://timestamp.sectigo.com /td SHA256 /a "$fullExePath"
            
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ Application signed successfully"
              
              # Verify signature
              & signtool verify /pa "$fullExePath"
            } else {
              Write-Host "❌ Code signing failed with exit code $LASTEXITCODE"
            }
          } else {
            Write-Host "❌ Could not find nwss-cnc.exe to sign"
          }
          
          # Clean up
          Remove-Item $certPath -ErrorAction SilentlyContinue
        } else {
          Write-Host "⚠️ No signing certificates configured, skipping code signing"
        }
      env:
        WINDOWS_CERTIFICATE_P12: ${{ secrets.WINDOWS_CERTIFICATE_P12 }}
        WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        
    - name: Package
      run: |
        cmake --build build --config Release --target package_for_github
        
    - name: Find artifacts
      run: |
        Get-ChildItem -Path build -Recurse -Include "*.zip", "*.exe" | ForEach-Object { Write-Host $_.FullName }
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nwss-cnc-windows
        path: |
          build/*.zip
          build/*.exe
          build/install/
        retention-days: 30
        
    - name: Upload to release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/*.zip
          build/*.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 