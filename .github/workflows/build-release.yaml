name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering for testing

jobs:
  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-2022
    strategy:
      matrix:
        arch: [win64_msvc2019_64, win32_msvc2019]
        include:
          - arch: win64_msvc2019_64
            qt_arch: win64_msvc2019_64
            display_name: Windows x64
            artifact_suffix: win64
          - arch: win32_msvc2019
            qt_arch: win32_msvc2019
            display_name: Windows x86
            artifact_suffix: win32

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.5.0'
          host: 'windows'
          target: 'desktop'
          arch: ${{ matrix.qt_arch }}
          modules: 'qtserialport'
          set-env: 'true'
          aqtversion: '==3.2.*'

      - name: Setup MSVC environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ contains(matrix.arch, 'win64') && 'x64' || 'x86' }}
      
      - name: Create build directory
        run: cd nwss-cnc && mkdir build

      - name: Configure CMake
        working-directory: ./nwss-cnc/build
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$env:Qt6_DIR"

      - name: Build application
        working-directory: ./nwss-cnc/build
        run: cmake --build . --config Release

      - name: Package application
        working-directory: ./nwss-cnc/build
        run: cmake --build . --target package_for_github
      
      - name: Rename artifacts for clarity
        working-directory: ./nwss-cnc/build
        run: |
          Get-ChildItem -Path "." -Filter "*.exe" | Rename-Item -NewName {$_.BaseName + "-${{ matrix.artifact_suffix }}" + $_.Extension}
          Get-ChildItem -Path "." -Filter "*.zip" | Rename-Item -NewName {$_.BaseName + "-${{ matrix.artifact_suffix }}" + $_.Extension}
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-package-${{ matrix.artifact_suffix }}
          path: |
            ./nwss-cnc/build/*.zip
            ./nwss-cnc/build/*.exe
  
  build-macos:
    name: Build macOS (${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: macos-12
            qt_arch: clang_64
            display_name: macOS Intel
            artifact_suffix: intel
          - arch: arm64
            runner: macos-14
            qt_arch: clang_64
            display_name: macOS Apple Silicon
            artifact_suffix: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.5.0'
          host: 'mac'
          target: 'desktop'
          arch: ${{ matrix.qt_arch }}
          modules: 'qtserialport'
          set-env: 'true'
          aqtversion: '==3.2.*'

      - name: Create build directory
        run: cd nwss-cnc && mkdir build

      - name: Configure CMake
        working-directory: ./nwss-cnc/build
        env:
          CMAKE_OSX_ARCHITECTURES: ${{ matrix.arch }}
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$Qt6_DIR" -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }}

      - name: Build application
        working-directory: ./nwss-cnc/build
        run: cmake --build . --config Release

      - name: Package application
        working-directory: ./nwss-cnc/build
        run: cmake --build . --target package_for_github
      
      - name: Rename artifacts for clarity
        working-directory: ./nwss-cnc/build
        run: |
          for file in *.dmg; do
            mv "$file" "${file%.dmg}-${{ matrix.artifact_suffix }}.dmg"
          done
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-package-${{ matrix.artifact_suffix }}
          path: ./nwss-cnc/build/*.dmg
  
  build-linux:
    name: Build Linux (${{ matrix.distro }})
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          - distro: ubuntu-22.04
            container: ubuntu:22.04
            display_name: Ubuntu 22.04
            artifact_suffix: ubuntu2204
          - distro: debian-11
            container: debian:11
            display_name: Debian 11
            artifact_suffix: debian11

    steps:
      - name: Install dependencies
        run: |
          apt-get update && apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            git \
            pkg-config \
            libgl1-mesa-dev \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxrender-dev \
            libxcb1-dev \
            libxcb-glx0-dev \
            libxcb-keysyms1-dev \
            libxcb-image0-dev \
            libxcb-shm0-dev \
            libxcb-icccm4-dev \
            libxcb-sync-dev \
            libxcb-xfixes0-dev \
            libxcb-shape0-dev \
            libxcb-randr0-dev \
            libxcb-render-util0-dev \
            libxcb-util-dev \
            libxcb-xinerama0-dev \
            libxcb-xkb-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            wget \
            ca-certificates

      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Qt
        run: |
          wget https://github.com/miurahr/aqtinstall/releases/download/v3.2.3/aqt_x64_3.2.3.tar.gz
          tar -xzf aqt_x64_3.2.3.tar.gz
          cd aqt_x64
          ./aqt install-qt linux desktop 6.5.0 gcc_64 -m qtserialport
          echo "Qt6_DIR=$PWD/6.5.0/gcc_64" >> $GITHUB_ENV
          echo "$PWD/6.5.0/gcc_64/bin" >> $GITHUB_PATH

      - name: Create build directory
        run: cd nwss-cnc && mkdir build

      - name: Configure CMake
        working-directory: ./nwss-cnc/build
        run: |
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="$Qt6_DIR"

      - name: Build application
        working-directory: ./nwss-cnc/build
        run: cmake --build . --config Release

      - name: Package application
        working-directory: ./nwss-cnc/build
        run: cmake --build . --target package_for_github
      
      - name: Create AppImage (Ubuntu only)
        if: matrix.distro == 'ubuntu-22.04'
        working-directory: ./nwss-cnc/build
        run: |
          apt-get install -y libfuse2 fuse
          mkdir -p AppDir/usr/bin AppDir/usr/lib AppDir/usr/share/applications AppDir/usr/share/icons/hicolor/256x256/apps
          cp NWSS-CNC AppDir/usr/bin/
          cp -r ../resources/icons/nwss-cnc-icon.png AppDir/usr/share/icons/hicolor/256x256/apps/
          
          # Create desktop file
          cat > AppDir/usr/share/applications/nwss-cnc.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=NWSS CNC
          Exec=NWSS-CNC
          Icon=nwss-cnc-icon
          Categories=Graphics;
          EOF
          
          # Get AppImageTool
          wget -c https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          
          # Create AppImage
          ./appimagetool-x86_64.AppImage AppDir NWSS-CNC-${{ matrix.artifact_suffix }}.AppImage
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-package-${{ matrix.artifact_suffix }}
          path: |
            ./nwss-cnc/build/*.deb
            ./nwss-cnc/build/*.rpm
            ./nwss-cnc/build/*.tar.gz
            ./nwss-cnc/build/*.AppImage
  
  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Display structure of downloaded files
        run: ls -R artifacts
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          name: NWSS CNC ${{ github.ref_name }}
          body: |
            # NWSS CNC ${{ github.ref_name }} Release
            
            SVG to G-Code Converter for CNC machines
            
            ## Downloads
            
            ### Windows
            - NWSS-CNC-win64.exe - Windows 64-bit Installer
            - NWSS-CNC-win64.zip - Windows 64-bit Portable
            - NWSS-CNC-win32.exe - Windows 32-bit Installer
            - NWSS-CNC-win32.zip - Windows 32-bit Portable
            
            ### macOS
            - NWSS-CNC-intel.dmg - macOS Intel
            - NWSS-CNC-arm64.dmg - macOS Apple Silicon (M1/M2/M3)
            
            ### Linux
            - NWSS-CNC-ubuntu2204.AppImage - Linux AppImage (works on most distributions)
            - NWSS-CNC-ubuntu2204.deb - Ubuntu/Debian package
            - NWSS-CNC-debian11.deb - Debian package
            
            ## Changes in this release
            
            [Release notes here]